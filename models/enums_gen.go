// Code generated by enum-generate.go DO NOT EDIT.

package models

import "gogs.mikescher.com/BlackForestBytes/goext/langext"
import "gogs.mikescher.com/BlackForestBytes/goext/enums"

const ChecksumEnumGenerator = "1bdb9e4607543607fd5936933dc739d6521b589894fa63ee0778aa1540fd064e" // GoExtVersion: 0.0.298

// ================================ DeDupKey ================================
//
// File:       enums.go
// StringEnum: true
// DescrEnum:  false
//

var __DeDupKeyValues = []DeDupKey{
	DeDupKeyTitle,
	DeDupKeyArtist,
	DeDupKeyAlbum,
	DeDupKeyYear,
	DeDupKeyTrackIndex,
	DeDupKeyTrackTotal,
	DeDupKeyFilename,
}

var __DeDupKeyVarnames = map[DeDupKey]string{
	DeDupKeyTitle:      "DeDupKeyTitle",
	DeDupKeyArtist:     "DeDupKeyArtist",
	DeDupKeyAlbum:      "DeDupKeyAlbum",
	DeDupKeyYear:       "DeDupKeyYear",
	DeDupKeyTrackIndex: "DeDupKeyTrackIndex",
	DeDupKeyTrackTotal: "DeDupKeyTrackTotal",
	DeDupKeyFilename:   "DeDupKeyFilename",
}

func (e DeDupKey) Valid() bool {
	return langext.InArray(e, __DeDupKeyValues)
}

func (e DeDupKey) Values() []DeDupKey {
	return __DeDupKeyValues
}

func (e DeDupKey) ValuesAny() []any {
	return langext.ArrCastToAny(__DeDupKeyValues)
}

func (e DeDupKey) ValuesMeta() []enums.EnumMetaValue {
	return DeDupKeyValuesMeta()
}

func (e DeDupKey) String() string {
	return string(e)
}

func (e DeDupKey) VarName() string {
	if d, ok := __DeDupKeyVarnames[e]; ok {
		return d
	}
	return ""
}

func (e DeDupKey) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseDeDupKey(vv string) (DeDupKey, bool) {
	for _, ev := range __DeDupKeyValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func DeDupKeyValues() []DeDupKey {
	return __DeDupKeyValues
}

func DeDupKeyValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		DeDupKeyTitle.Meta(),
		DeDupKeyArtist.Meta(),
		DeDupKeyAlbum.Meta(),
		DeDupKeyYear.Meta(),
		DeDupKeyTrackIndex.Meta(),
		DeDupKeyTrackTotal.Meta(),
		DeDupKeyFilename.Meta(),
	}
}

// ================================ DeDupSelector ================================
//
// File:       enums.go
// StringEnum: true
// DescrEnum:  false
//

var __DeDupSelectorValues = []DeDupSelector{
	DeDupSelectorAny,
	DeDupSelectorNewest,
	DeDupSelectorOldest,
	DeDupSelectorBiggest,
}

var __DeDupSelectorVarnames = map[DeDupSelector]string{
	DeDupSelectorAny:     "DeDupSelectorAny",
	DeDupSelectorNewest:  "DeDupSelectorNewest",
	DeDupSelectorOldest:  "DeDupSelectorOldest",
	DeDupSelectorBiggest: "DeDupSelectorBiggest",
}

func (e DeDupSelector) Valid() bool {
	return langext.InArray(e, __DeDupSelectorValues)
}

func (e DeDupSelector) Values() []DeDupSelector {
	return __DeDupSelectorValues
}

func (e DeDupSelector) ValuesAny() []any {
	return langext.ArrCastToAny(__DeDupSelectorValues)
}

func (e DeDupSelector) ValuesMeta() []enums.EnumMetaValue {
	return DeDupSelectorValuesMeta()
}

func (e DeDupSelector) String() string {
	return string(e)
}

func (e DeDupSelector) VarName() string {
	if d, ok := __DeDupSelectorVarnames[e]; ok {
		return d
	}
	return ""
}

func (e DeDupSelector) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseDeDupSelector(vv string) (DeDupSelector, bool) {
	for _, ev := range __DeDupSelectorValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func DeDupSelectorValues() []DeDupSelector {
	return __DeDupSelectorValues
}

func DeDupSelectorValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		DeDupSelectorAny.Meta(),
		DeDupSelectorNewest.Meta(),
		DeDupSelectorOldest.Meta(),
		DeDupSelectorBiggest.Meta(),
	}
}

// ================================ SortKey ================================
//
// File:       enums.go
// StringEnum: true
// DescrEnum:  false
//

var __SortKeyValues = []SortKey{
	SortFilename,
	SortFilepath,
	SortTitle,
	SortArtist,
	SortAlbum,
	SortTrackIndex,
	SortYear,
	SortFileCDate,
	SortFileMDate,
	SortFileADate,
}

var __SortKeyVarnames = map[SortKey]string{
	SortFilename:   "SortFilename",
	SortFilepath:   "SortFilepath",
	SortTitle:      "SortTitle",
	SortArtist:     "SortArtist",
	SortAlbum:      "SortAlbum",
	SortTrackIndex: "SortTrackIndex",
	SortYear:       "SortYear",
	SortFileCDate:  "SortFileCDate",
	SortFileMDate:  "SortFileMDate",
	SortFileADate:  "SortFileADate",
}

func (e SortKey) Valid() bool {
	return langext.InArray(e, __SortKeyValues)
}

func (e SortKey) Values() []SortKey {
	return __SortKeyValues
}

func (e SortKey) ValuesAny() []any {
	return langext.ArrCastToAny(__SortKeyValues)
}

func (e SortKey) ValuesMeta() []enums.EnumMetaValue {
	return SortKeyValuesMeta()
}

func (e SortKey) String() string {
	return string(e)
}

func (e SortKey) VarName() string {
	if d, ok := __SortKeyVarnames[e]; ok {
		return d
	}
	return ""
}

func (e SortKey) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseSortKey(vv string) (SortKey, bool) {
	for _, ev := range __SortKeyValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func SortKeyValues() []SortKey {
	return __SortKeyValues
}

func SortKeyValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		SortFilename.Meta(),
		SortFilepath.Meta(),
		SortTitle.Meta(),
		SortArtist.Meta(),
		SortAlbum.Meta(),
		SortTrackIndex.Meta(),
		SortYear.Meta(),
		SortFileCDate.Meta(),
		SortFileMDate.Meta(),
		SortFileADate.Meta(),
	}
}

// ================================ JobStatus ================================
//
// File:       jobExecution.go
// StringEnum: true
// DescrEnum:  false
//

var __JobStatusValues = []JobStatus{
	JobStatusRunning,
	JobStatusSuccess,
	JobStatusFailed,
}

var __JobStatusVarnames = map[JobStatus]string{
	JobStatusRunning: "JobStatusRunning",
	JobStatusSuccess: "JobStatusSuccess",
	JobStatusFailed:  "JobStatusFailed",
}

func (e JobStatus) Valid() bool {
	return langext.InArray(e, __JobStatusValues)
}

func (e JobStatus) Values() []JobStatus {
	return __JobStatusValues
}

func (e JobStatus) ValuesAny() []any {
	return langext.ArrCastToAny(__JobStatusValues)
}

func (e JobStatus) ValuesMeta() []enums.EnumMetaValue {
	return JobStatusValuesMeta()
}

func (e JobStatus) String() string {
	return string(e)
}

func (e JobStatus) VarName() string {
	if d, ok := __JobStatusVarnames[e]; ok {
		return d
	}
	return ""
}

func (e JobStatus) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseJobStatus(vv string) (JobStatus, bool) {
	for _, ev := range __JobStatusValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func JobStatusValues() []JobStatus {
	return __JobStatusValues
}

func JobStatusValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		JobStatusRunning.Meta(),
		JobStatusSuccess.Meta(),
		JobStatusFailed.Meta(),
	}
}

// ================================ JobLogLevel ================================
//
// File:       jobLog.go
// StringEnum: true
// DescrEnum:  false
//

var __JobLogLevelValues = []JobLogLevel{
	JobLogLevelDebug,
	JobLogLevelInfo,
	JobLogLevelWarn,
	JobLogLevelError,
	JobLogLevelFatal,
}

var __JobLogLevelVarnames = map[JobLogLevel]string{
	JobLogLevelDebug: "JobLogLevelDebug",
	JobLogLevelInfo:  "JobLogLevelInfo",
	JobLogLevelWarn:  "JobLogLevelWarn",
	JobLogLevelError: "JobLogLevelError",
	JobLogLevelFatal: "JobLogLevelFatal",
}

func (e JobLogLevel) Valid() bool {
	return langext.InArray(e, __JobLogLevelValues)
}

func (e JobLogLevel) Values() []JobLogLevel {
	return __JobLogLevelValues
}

func (e JobLogLevel) ValuesAny() []any {
	return langext.ArrCastToAny(__JobLogLevelValues)
}

func (e JobLogLevel) ValuesMeta() []enums.EnumMetaValue {
	return JobLogLevelValuesMeta()
}

func (e JobLogLevel) String() string {
	return string(e)
}

func (e JobLogLevel) VarName() string {
	if d, ok := __JobLogLevelVarnames[e]; ok {
		return d
	}
	return ""
}

func (e JobLogLevel) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseJobLogLevel(vv string) (JobLogLevel, bool) {
	for _, ev := range __JobLogLevelValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func JobLogLevelValues() []JobLogLevel {
	return __JobLogLevelValues
}

func JobLogLevelValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		JobLogLevelDebug.Meta(),
		JobLogLevelInfo.Meta(),
		JobLogLevelWarn.Meta(),
		JobLogLevelError.Meta(),
		JobLogLevelFatal.Meta(),
	}
}
