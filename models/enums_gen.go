// Code generated by enum-generate.go DO NOT EDIT.

package models

import "gogs.mikescher.com/BlackForestBytes/goext/langext"
import "gogs.mikescher.com/BlackForestBytes/goext/enums"

const ChecksumEnumGenerator = "8adba60e7288b1e071f9802c8db7ced3e4a8b93ade479542716627c604812f05" // GoExtVersion: 0.0.298

// ================================ DeDupKey ================================
//
// File:       enums.go
// StringEnum: true
// DescrEnum:  false
//

var __DeDupKeyValues = []DeDupKey{
	DeDupKeyTitle,
	DeDupKeyArtist,
	DeDupKeyAlbum,
	DeDupKeyYear,
	DeDupKeyTrackIndex,
	DeDupKeyTrackTotal,
	DeDupKeyFilename,
}

var __DeDupKeyVarnames = map[DeDupKey]string{
	DeDupKeyTitle:      "DeDupKeyTitle",
	DeDupKeyArtist:     "DeDupKeyArtist",
	DeDupKeyAlbum:      "DeDupKeyAlbum",
	DeDupKeyYear:       "DeDupKeyYear",
	DeDupKeyTrackIndex: "DeDupKeyTrackIndex",
	DeDupKeyTrackTotal: "DeDupKeyTrackTotal",
	DeDupKeyFilename:   "DeDupKeyFilename",
}

func (e DeDupKey) Valid() bool {
	return langext.InArray(e, __DeDupKeyValues)
}

func (e DeDupKey) Values() []DeDupKey {
	return __DeDupKeyValues
}

func (e DeDupKey) ValuesAny() []any {
	return langext.ArrCastToAny(__DeDupKeyValues)
}

func (e DeDupKey) ValuesMeta() []enums.EnumMetaValue {
	return DeDupKeyValuesMeta()
}

func (e DeDupKey) String() string {
	return string(e)
}

func (e DeDupKey) VarName() string {
	if d, ok := __DeDupKeyVarnames[e]; ok {
		return d
	}
	return ""
}

func (e DeDupKey) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseDeDupKey(vv string) (DeDupKey, bool) {
	for _, ev := range __DeDupKeyValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func DeDupKeyValues() []DeDupKey {
	return __DeDupKeyValues
}

func DeDupKeyValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		DeDupKeyTitle.Meta(),
		DeDupKeyArtist.Meta(),
		DeDupKeyAlbum.Meta(),
		DeDupKeyYear.Meta(),
		DeDupKeyTrackIndex.Meta(),
		DeDupKeyTrackTotal.Meta(),
		DeDupKeyFilename.Meta(),
	}
}

// ================================ DeDupSelector ================================
//
// File:       enums.go
// StringEnum: true
// DescrEnum:  false
//

var __DeDupSelectorValues = []DeDupSelector{
	DeDupSelectorNewest,
	DeDupSelectorOldest,
	DeDupSelectorAny,
}

var __DeDupSelectorVarnames = map[DeDupSelector]string{
	DeDupSelectorNewest: "DeDupSelectorNewest",
	DeDupSelectorOldest: "DeDupSelectorOldest",
	DeDupSelectorAny:    "DeDupSelectorAny",
}

func (e DeDupSelector) Valid() bool {
	return langext.InArray(e, __DeDupSelectorValues)
}

func (e DeDupSelector) Values() []DeDupSelector {
	return __DeDupSelectorValues
}

func (e DeDupSelector) ValuesAny() []any {
	return langext.ArrCastToAny(__DeDupSelectorValues)
}

func (e DeDupSelector) ValuesMeta() []enums.EnumMetaValue {
	return DeDupSelectorValuesMeta()
}

func (e DeDupSelector) String() string {
	return string(e)
}

func (e DeDupSelector) VarName() string {
	if d, ok := __DeDupSelectorVarnames[e]; ok {
		return d
	}
	return ""
}

func (e DeDupSelector) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseDeDupSelector(vv string) (DeDupSelector, bool) {
	for _, ev := range __DeDupSelectorValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func DeDupSelectorValues() []DeDupSelector {
	return __DeDupSelectorValues
}

func DeDupSelectorValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		DeDupSelectorNewest.Meta(),
		DeDupSelectorOldest.Meta(),
		DeDupSelectorAny.Meta(),
	}
}

// ================================ JobStatus ================================
//
// File:       jobExecution.go
// StringEnum: true
// DescrEnum:  false
//

var __JobStatusValues = []JobStatus{
	JobStatusRunning,
	JobStatusSuccess,
	JobStatusFailed,
}

var __JobStatusVarnames = map[JobStatus]string{
	JobStatusRunning: "JobStatusRunning",
	JobStatusSuccess: "JobStatusSuccess",
	JobStatusFailed:  "JobStatusFailed",
}

func (e JobStatus) Valid() bool {
	return langext.InArray(e, __JobStatusValues)
}

func (e JobStatus) Values() []JobStatus {
	return __JobStatusValues
}

func (e JobStatus) ValuesAny() []any {
	return langext.ArrCastToAny(__JobStatusValues)
}

func (e JobStatus) ValuesMeta() []enums.EnumMetaValue {
	return JobStatusValuesMeta()
}

func (e JobStatus) String() string {
	return string(e)
}

func (e JobStatus) VarName() string {
	if d, ok := __JobStatusVarnames[e]; ok {
		return d
	}
	return ""
}

func (e JobStatus) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseJobStatus(vv string) (JobStatus, bool) {
	for _, ev := range __JobStatusValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func JobStatusValues() []JobStatus {
	return __JobStatusValues
}

func JobStatusValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		JobStatusRunning.Meta(),
		JobStatusSuccess.Meta(),
		JobStatusFailed.Meta(),
	}
}

// ================================ JobLogLevel ================================
//
// File:       jobLog.go
// StringEnum: true
// DescrEnum:  false
//

var __JobLogLevelValues = []JobLogLevel{
	JobLogLevelDebug,
	JobLogLevelInfo,
	JobLogLevelWarn,
	JobLogLevelError,
	JobLogLevelFatal,
}

var __JobLogLevelVarnames = map[JobLogLevel]string{
	JobLogLevelDebug: "JobLogLevelDebug",
	JobLogLevelInfo:  "JobLogLevelInfo",
	JobLogLevelWarn:  "JobLogLevelWarn",
	JobLogLevelError: "JobLogLevelError",
	JobLogLevelFatal: "JobLogLevelFatal",
}

func (e JobLogLevel) Valid() bool {
	return langext.InArray(e, __JobLogLevelValues)
}

func (e JobLogLevel) Values() []JobLogLevel {
	return __JobLogLevelValues
}

func (e JobLogLevel) ValuesAny() []any {
	return langext.ArrCastToAny(__JobLogLevelValues)
}

func (e JobLogLevel) ValuesMeta() []enums.EnumMetaValue {
	return JobLogLevelValuesMeta()
}

func (e JobLogLevel) String() string {
	return string(e)
}

func (e JobLogLevel) VarName() string {
	if d, ok := __JobLogLevelVarnames[e]; ok {
		return d
	}
	return ""
}

func (e JobLogLevel) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseJobLogLevel(vv string) (JobLogLevel, bool) {
	for _, ev := range __JobLogLevelValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func JobLogLevelValues() []JobLogLevel {
	return __JobLogLevelValues
}

func JobLogLevelValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		JobLogLevelDebug.Meta(),
		JobLogLevelInfo.Meta(),
		JobLogLevelWarn.Meta(),
		JobLogLevelError.Meta(),
		JobLogLevelFatal.Meta(),
	}
}
