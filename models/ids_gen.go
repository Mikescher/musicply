// Code generated by csid-generate.go DO NOT EDIT.

package models

import "crypto/rand"
import "crypto/sha256"
import "fmt"
import "github.com/go-playground/validator/v10"
import "github.com/rs/zerolog/log"
import "gogs.mikescher.com/BlackForestBytes/goext/exerr"
import "gogs.mikescher.com/BlackForestBytes/goext/langext"
import "gogs.mikescher.com/BlackForestBytes/goext/rext"
import "math/big"
import "reflect"
import "regexp"
import "strings"

const ChecksumCharsetIDGenerator = "15e86cb39a0dba17b3dcbfa254cd2397f3bc2557065977bca9fe5dabe230ad13" // GoExtVersion: 0.0.297

const idlen = 24

const checklen = 1

const idCharset = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
const idCharsetLen = len(idCharset)

var charSetReverseMap = generateCharsetMap()

const (
	prefixJobLogID               = "JLG"
	prefixJobExecutionID         = "JEX"
	prefixSourceID               = "SRC"
	prefixPlaylistID             = "PLS"
	prefixHierarchicalPlaylistID = "HPL"
	prefixTrackID                = "TRK"
	prefixFooterLinkID           = "FLK"
)

var (
	regexJobLogID               = generateRegex(prefixJobLogID)
	regexJobExecutionID         = generateRegex(prefixJobExecutionID)
	regexSourceID               = generateRegex(prefixSourceID)
	regexPlaylistID             = generateRegex(prefixPlaylistID)
	regexHierarchicalPlaylistID = generateRegex(prefixHierarchicalPlaylistID)
	regexTrackID                = generateRegex(prefixTrackID)
	regexFooterLinkID           = generateRegex(prefixFooterLinkID)
)

func generateRegex(prefix string) rext.Regex {
	return rext.W(regexp.MustCompile(fmt.Sprintf("^%s[%s]{%d}[%s]{%d}$", prefix, idCharset, idlen-len(prefix)-checklen, idCharset, checklen)))
}

func generateCharsetMap() []int {
	result := make([]int, 128)
	for i := 0; i < len(result); i++ {
		result[i] = -1
	}
	for idx, chr := range idCharset {
		result[int(chr)] = idx
	}
	return result
}

func generateID(prefix string) string {
	k := ""
	csMax := big.NewInt(int64(idCharsetLen))
	checksum := 0
	for i := 0; i < idlen-len(prefix)-checklen; i++ {
		v, err := rand.Int(rand.Reader, csMax)
		if err != nil {
			panic(err)
		}
		v64 := v.Int64()
		k += string(idCharset[v64])
		checksum = (checksum + int(v64)) % (idCharsetLen)
	}
	checkstr := string(idCharset[checksum%idCharsetLen])
	return prefix + k + checkstr
}

func generateIDFromSeed(prefix string, seed string) string {
	h := sha256.New()

	iddata := ""
	for len(iddata) < idlen-len(prefix)-checklen {
		h.Write([]byte(seed))
		bs := h.Sum(nil)
		iddata += langext.NewAnyBaseConverter(idCharset).Encode(bs)
	}

	checksum := 0
	for i := 0; i < idlen-len(prefix)-checklen; i++ {
		ichr := int(iddata[i])
		checksum = (checksum + charSetReverseMap[ichr]) % (idCharsetLen)
	}

	checkstr := string(idCharset[checksum%idCharsetLen])

	return prefix + iddata[:(idlen-len(prefix)-checklen)] + checkstr
}

func validateID(prefix string, value string) error {
	if len(value) != idlen {
		return exerr.New(exerr.TypeInvalidCSID, "id has the wrong length").Str("value", value).Build()
	}

	if !strings.HasPrefix(value, prefix) {
		return exerr.New(exerr.TypeInvalidCSID, "id is missing the correct prefix").Str("value", value).Str("prefix", prefix).Build()
	}

	checksum := 0
	for i := len(prefix); i < len(value)-checklen; i++ {
		ichr := int(value[i])
		if ichr < 0 || ichr >= len(charSetReverseMap) || charSetReverseMap[ichr] == -1 {
			return exerr.New(exerr.TypeInvalidCSID, "id contains invalid characters").Str("value", value).Build()
		}
		checksum = (checksum + charSetReverseMap[ichr]) % (idCharsetLen)
	}

	checkstr := string(idCharset[checksum%idCharsetLen])

	if !strings.HasSuffix(value, checkstr) {
		return exerr.New(exerr.TypeInvalidCSID, "id checkstring is invalid").Str("value", value).Str("checkstr", checkstr).Build()
	}

	return nil
}

func getRawData(prefix string, value string) string {
	if len(value) != idlen {
		return ""
	}
	return value[len(prefix) : idlen-checklen]
}

func getCheckString(prefix string, value string) string {
	if len(value) != idlen {
		return ""
	}
	return value[idlen-checklen:]
}

func ValidateEntityID(vfl validator.FieldLevel) bool {
	if !vfl.Field().CanInterface() {
		log.Error().Msgf("Failed to validate EntityID (cannot interface ?!?)")
		return false
	}

	ifvalue := vfl.Field().Interface()

	if value1, ok := ifvalue.(EntityID); ok {

		if vfl.Field().Type().Kind() == reflect.Pointer && langext.IsNil(value1) {
			return true
		}

		if err := value1.Valid(); err != nil {
			log.Debug().Msgf("Failed to validate EntityID '%s' (%s)", value1.String(), err.Error())
			return false
		} else {
			return true
		}

	} else {
		log.Error().Msgf("Failed to validate EntityID (wrong type: %T)", ifvalue)
		return false
	}
}

// ================================ JobLogID (ids.go) ================================

func NewJobLogID() JobLogID {
	return JobLogID(generateID(prefixJobLogID))
}

func (id JobLogID) Valid() error {
	return validateID(prefixJobLogID, string(id))
}

func (i JobLogID) String() string {
	return string(i)
}

func (i JobLogID) Prefix() string {
	return prefixJobLogID
}

func (id JobLogID) Raw() string {
	return getRawData(prefixJobLogID, string(id))
}

func (id JobLogID) CheckString() string {
	return getCheckString(prefixJobLogID, string(id))
}

func (id JobLogID) Regex() rext.Regex {
	return regexJobLogID
}

// ================================ JobExecutionID (ids.go) ================================

func NewJobExecutionID() JobExecutionID {
	return JobExecutionID(generateID(prefixJobExecutionID))
}

func (id JobExecutionID) Valid() error {
	return validateID(prefixJobExecutionID, string(id))
}

func (i JobExecutionID) String() string {
	return string(i)
}

func (i JobExecutionID) Prefix() string {
	return prefixJobExecutionID
}

func (id JobExecutionID) Raw() string {
	return getRawData(prefixJobExecutionID, string(id))
}

func (id JobExecutionID) CheckString() string {
	return getCheckString(prefixJobExecutionID, string(id))
}

func (id JobExecutionID) Regex() rext.Regex {
	return regexJobExecutionID
}

// ================================ SourceID (ids.go) ================================

func NewSourceID() SourceID {
	return SourceID(generateID(prefixSourceID))
}

func (id SourceID) Valid() error {
	return validateID(prefixSourceID, string(id))
}

func (i SourceID) String() string {
	return string(i)
}

func (i SourceID) Prefix() string {
	return prefixSourceID
}

func (id SourceID) Raw() string {
	return getRawData(prefixSourceID, string(id))
}

func (id SourceID) CheckString() string {
	return getCheckString(prefixSourceID, string(id))
}

func (id SourceID) Regex() rext.Regex {
	return regexSourceID
}

// ================================ PlaylistID (ids.go) ================================

func NewPlaylistID() PlaylistID {
	return PlaylistID(generateID(prefixPlaylistID))
}

func (id PlaylistID) Valid() error {
	return validateID(prefixPlaylistID, string(id))
}

func (i PlaylistID) String() string {
	return string(i)
}

func (i PlaylistID) Prefix() string {
	return prefixPlaylistID
}

func (id PlaylistID) Raw() string {
	return getRawData(prefixPlaylistID, string(id))
}

func (id PlaylistID) CheckString() string {
	return getCheckString(prefixPlaylistID, string(id))
}

func (id PlaylistID) Regex() rext.Regex {
	return regexPlaylistID
}

// ================================ HierarchicalPlaylistID (ids.go) ================================

func NewHierarchicalPlaylistID() HierarchicalPlaylistID {
	return HierarchicalPlaylistID(generateID(prefixHierarchicalPlaylistID))
}

func (id HierarchicalPlaylistID) Valid() error {
	return validateID(prefixHierarchicalPlaylistID, string(id))
}

func (i HierarchicalPlaylistID) String() string {
	return string(i)
}

func (i HierarchicalPlaylistID) Prefix() string {
	return prefixHierarchicalPlaylistID
}

func (id HierarchicalPlaylistID) Raw() string {
	return getRawData(prefixHierarchicalPlaylistID, string(id))
}

func (id HierarchicalPlaylistID) CheckString() string {
	return getCheckString(prefixHierarchicalPlaylistID, string(id))
}

func (id HierarchicalPlaylistID) Regex() rext.Regex {
	return regexHierarchicalPlaylistID
}

// ================================ TrackID (ids.go) ================================

func NewTrackID() TrackID {
	return TrackID(generateID(prefixTrackID))
}

func (id TrackID) Valid() error {
	return validateID(prefixTrackID, string(id))
}

func (i TrackID) String() string {
	return string(i)
}

func (i TrackID) Prefix() string {
	return prefixTrackID
}

func (id TrackID) Raw() string {
	return getRawData(prefixTrackID, string(id))
}

func (id TrackID) CheckString() string {
	return getCheckString(prefixTrackID, string(id))
}

func (id TrackID) Regex() rext.Regex {
	return regexTrackID
}

// ================================ FooterLinkID (ids.go) ================================

func NewFooterLinkID() FooterLinkID {
	return FooterLinkID(generateID(prefixFooterLinkID))
}

func (id FooterLinkID) Valid() error {
	return validateID(prefixFooterLinkID, string(id))
}

func (i FooterLinkID) String() string {
	return string(i)
}

func (i FooterLinkID) Prefix() string {
	return prefixFooterLinkID
}

func (id FooterLinkID) Raw() string {
	return getRawData(prefixFooterLinkID, string(id))
}

func (id FooterLinkID) CheckString() string {
	return getCheckString(prefixFooterLinkID, string(id))
}

func (id FooterLinkID) Regex() rext.Regex {
	return regexFooterLinkID
}
